{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Giphy","useState","state","setState","getstate","setgetState","othergif","setOthergif","getGiph","eve","alert","Axios","get","then","inf","data","embed_url","linksdata","map","person","value","ll","console","log","className","type","onChange","e","target","placeholder","onKeyPress","key","onClick","src","data-alt","height","width","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAuGeA,MAjGf,WAAkB,IAAD,EAESC,mBAAS,IAFlB,mBAEVC,EAFU,KAEHC,EAFG,OAGeF,mBAAS,IAHxB,mBAGVG,EAHU,KAGAC,EAHA,OAKeJ,mBAAS,IALxB,mBAKVK,EALU,KAKAC,EALA,KASTC,EAAU,SAACC,GAEb,GAAiB,KAAbL,EAEJ,OADCM,MAAM,mCACA,EAGTC,IAAMC,IAAN,iDAAoDR,EAApD,2BACCS,MAAK,SAACC,GACLX,EAASW,EAAIC,KAAKA,KAAK,GAAGC,WAE1B,IAGMC,EAHQH,EAAIC,KAAKA,KAEFG,KAAI,SAAAC,GAAM,MAAK,CAAEC,MAAOD,EAAOH,cAC3BE,KAAI,SAAAG,GAAE,OAAIA,EAAGD,SAGvCb,EAAYU,GACZK,QAAQC,IAAIhB,OAgBf,OACE,sBAAKiB,UAAU,QAAf,UAEC,gCAAQ,sCAEP,uBAAOC,KAAK,OACZC,SAViB,SAACC,GACpBtB,EAAYsB,EAAEC,OAAOR,QAUnBA,MAAShB,EACToB,UAAU,QACVK,YAAY,iCACZC,WApBiB,SAAAH,GACP,UAAVA,EAAEI,KACJvB,OAwBA,wBAAQwB,QAASxB,EAASgB,UAAU,SAApC,4BACA,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACC,wBAAQS,IAAK/B,EAAOgC,WAAUhC,EAAOiC,OAAO,MAAMC,MAAM,MAAMZ,UAAU,aAAxE,iBAMH,sBAAKA,UAAU,UAAf,UACH,sBAAKA,UAAU,WAAf,UACE,wBAAQS,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,gBACA,wBAAQ2B,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,gBACA,wBAAQ2B,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,mBAID,sBAAKkB,UAAU,WAAf,UACC,wBAAQS,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,gBACA,wBAAQ2B,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,gBACA,wBAAQ2B,IAAK3B,EAAS,GAAKkB,UAAU,QAAQU,WAAU5B,EAAvD,mBAIO,sBAAKkB,UAAU,WAAf,UACC,wBAAQS,IAAK3B,EAAS,GAAKkB,UAAU,SAASU,WAAU5B,EAAxD,gBACA,wBAAQ2B,IAAK3B,EAAS,IAAMkB,UAAU,SAASU,WAAU5B,EAAzD,6BC/EI+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b4961409.chunk.js","sourcesContent":["import './App.css';\nimport React, {useState} from 'react'\nimport Axios from 'axios'\n\n\n\nfunction Giphy() {\n\nconst [state, setState] = useState(\"\")\nconst [getstate, setgetState] = useState(\"\")\n\nconst [othergif, setOthergif] = useState(\"\")\n\n\n\n  const getGiph = (eve) =>{\n   \n      if (getstate === \"\"){\n       alert(\"Giphy input must be filled out\")\n      return false\n  }\n\n    Axios.get(`https://api.giphy.com/v1/gifs/search?q=${getstate}&api_key=dc6zaTOxFJmzC`)\n    .then((inf)=>{\n      setState(inf.data.data[1].embed_url)\n\n      let alldata = inf.data.data\n\n      var result = alldata.map(person => ({ value: person.embed_url}));\n      const linksdata = result.map(ll => ll.value)\n     \n\n     setOthergif(linksdata)\n     console.log(setOthergif)\n    } )\n\n  \n  }\n \nconst handleKeyPress = e =>{\n  if (e.key === 'Enter'){\n    getGiph()\n  }\n}\n\n  const inputHandler = (e) =>{\n    setgetState(e.target.value)\n  }\n\n  return (\n    <div className=\"Giphy\">\n     \n     <style>{'body { background-color: black; }'}</style>\n      \n      <input type=\"text\" \n      onChange = {inputHandler}\n      value = {getstate}\n      className=\"input\"\n      placeholder=\"SEARCH ALL GIFS AND MEMEs HERE\"\n      onKeyPress={handleKeyPress}\n      \n      />\n\n\n\n    <button onClick={getGiph} className=\"button\"> get the gify </button>\n    <div className=\"all\">\n      <div className=\"main_gif\">\n       <iframe src={state} data-alt={state} height=\"200\" width=\"300\" className=\"main_frame\"> </iframe>\n      </div>\n     \n\n  { /*{othergif[0]} <br /> */}\n\n    <div className=\"all_gif\">\n <div className=\"alf_gif1\">\n  {<iframe src={othergif[3] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  {<iframe src={othergif[4] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  {<iframe src={othergif[6] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  \n  </div>\n\n  <div className=\"alf_gif2\">\n  {<iframe src={othergif[7] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  {<iframe src={othergif[8] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  {<iframe src={othergif[9] } className=\"frame\" data-alt={othergif}>  </iframe> }\n  </div>\n\n\n          <div className=\"alf-gif3\">\n          {<iframe src={othergif[5] } className=\"frame1\" data-alt={othergif}>  </iframe> }\n          {<iframe src={othergif[10] } className=\"frame1\" data-alt={othergif}>  </iframe> }\n\n          </div>\n  \n   </div>\n   \n\n   </div>\n</div>\n  );\n}\n\nexport default Giphy;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}